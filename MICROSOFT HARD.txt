https://www.stratascratch.com/blog/facebook-and-microsoft-data-science-sql-interview-questions/		


select month_all_user, new_user_all_user_count as new_users_share, (1-new_user_count/all_user_count from) as share_exist_users

(select extract(month from time_id) as month_new_user, count(distinct user_id) as new_user_count from 
				(
				select user_id, min(time_id) as new_user_start_date from facts_set
				group by 1
				)T1
				group by month_new_user
)T2
join

(select extract(month from time_id) as month_all_user, count(distinct user_id) as all_user_count from fact_set
)T3
on T2.month_new_user=T3.month_all_user

---------------- Same as above logic, done 5/20
Select month_user, new_users/all_users, 1-new_users/all_users from
(
Select new_user_month, count(distinct user_id) as new_users

From 
(Select user_id , min(extract(month from time_id)) as new_user_month
Group by 1)
T1
group by 1
)T2
Join
(Select extract(month from time_id) as month_user, count(distinct( user)) as all_users
Group by 1)
T3
On T2.new_user_month= T2.month_user
------------------
ANOTHER WAY--- with window function
----------------------------------------------------------------------

Select month_user, sum(new_user)/(sum(new_user)+sum(existing_user)) as new_ratio, sum(extisting_user)/(sum(new_user)+sum(existing_user)) as existing_ratio
FROM
(
Select month_user, user, (case when max(rnk)=1 then 1 end ) as new_user, (case when max(rnk)>1 then 1) end as existing user
FROM
(Select user, extract(month from time_id) as month_user , dense_rank()over (partition by user order by extract(month from time_id) DESC) as rnk
From table
)t1
) t2
-------------------
